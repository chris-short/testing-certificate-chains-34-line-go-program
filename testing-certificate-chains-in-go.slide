Golang to the rescue: Saving DevOps from TLS turmoil
GopherCon 2017 Lightning Talk

Chris Short
Manager of DevOps at Bankrate
chris@chrisshort.net
https://devopsish.com
@ChrisShort

* Introduction
Chris Short

- opensource.com and DZone Contributor
- Contributed to The Open Organization Guide to IT Culture Change
- DevOpsDays Speaker and Organizer
- devopsish.com
- chrisshort.net

This talk was derived from an opensource.com article I wrote in April 2017:
[[https://opensource.com/article/17/4/testing-certificate-chains-34-line-go-program][Golang to the rescue: Saving DevOps from TLS turmoil]]

: Hi! I'm Chris!
: I contribute content a few places
: I work in the DevOps space
: I run a DevOps Newsletter called DevOps'ish if you're into those
: This talk was dervied from an opensource.com article I wrote in April 2017

* But Most Importantly
.image img/gopherize-me-chris-short.png _ 550
.caption Me in Gopher Form by [[https://gopherize.me/][Gopherize.me]]
: But Most Importantly, I'm a Gopher

* Not Too Long Ago in a Place of Work Far, Far Away...
.image img/backstory.png 575 _
: My team inherited an application
: A third-party built the app a few years ago 
: Had long been abandoned
: Before we could do any re-engineering work, we had to resolve a critical issue.
: The certificates were about to expire!

* Let's Talk Certificate Chains
.image img/2-chainz-tell-em.png _ 525
.caption 2 Chainz (we can talk rap music later)
: Let's Talk Certificate Chains for a minute
: HTTPS, SSL it's all TLS, right?
: In my opinion, if you're using TLS you better have a rock solid configuration
: This means you have to include the certificate chain in the correct order
: This is no longer optional in the post-Heartbleed world
: The Internets are watching

* This is the Goal
.image img/chrisshort_net-qualys.png 600 _
: If you are going to bother to encrypt your traffic you better do it right
: This is what we're aiming for; an A+
: At a previous employer we obtained certs from a reputable vendor that our company was cool with
: I prefer Let's Encrypt but some companies aren't there yet for various reasons
: You generate your CSR and private key
: You send the CSR to the vendor
: The certificate arrives but doesn't have an intermediate key in chain

* NBD ... OMG
.image img/ssl-vendors-suck.png 550 _
: No big deal
: Let's go to the vendor's documentation...
: And OMG...
: The vendor docs are terrible
: This is when you learn...
: Cryptography is hard but implementing cryptographic best practices might be even harder

* 
.image img/jackie-chan.jpg 550 _
.caption Jackie Chan, y'all
: What do we do?
: Look at statistical probabilities and start shuffling keys around?
: The series of games you have to play with openssl or nginx or some other method aren't intuitive

* Never Forget
.image img/punch-card.jpg _ 500
.caption This was once a good UI and UX
: Don't forget THIS (holds up punch card) was good UX and UI not too long ago

* So What Does Any Good Engineer Do?
.image img/go_build.png _ 500
.caption Go Build by [[https://github.com/ashleymcnamara/gophers][Ashley McNamara]]
: I needed a tool that would fail if the certificate chain provided was incorrect
: I wanted a lightweight tool that could be publicly accessible
: Conducting a third-party analysis of the certificates and configuration was also a requirement
: There were no tools that I could find meeting these needs
: So I decided to build my own
: With Go of course!

* Three Go Packages: log
- The go `log` package is pretty self explanatory
- Package that enables logging
- Neeeded a spectacular failure at the sign of trouble
- `log` has three helper functions: `print`, `fatal`, and `panic`
- Output from the package goes to `stderr`
- Used a `fatal` error to get the web server to stop and log any issue
.image img/hugging_gophers.png _ 225
.caption Hugging Gophers by [[https://github.com/ashleymcnamara/gophers][Ashley McNamara]]

* Three Go Packages: crypto/tls
- The Go `crypto/tls` package partially implements TLS 1.2, as specified in [[https://tools.ietf.org/html/rfc5246][RFC 5246]]
- Package configures usable SSL/TLS versions
- Identifies preferred cipher suites and elliptic curves used during handshakes
- This is the package that handles connections securely
.image img/GOPHER_STAR_WARS.png _ 375
.caption Gopher Star Wars by [[https://github.com/ashleymcnamara/gophers][Ashley McNamara]]

* Three Go Packages: net/http
- Go implementation of HTTP
- `net/http` has a function called `ListenAndServeTLS`
- ListenAndServeTLS provides the desired certificate checking functionality
- "If the certificate is signed by a certificate authority, the certFile should be the concatenation of the server's certificate, any intermediates, and the CA's certificate."
.image img/GOPHER_INCLUSION.png _ 275
.caption Gopher Inclusion by [[https://github.com/ashleymcnamara/gophers][Ashley McNamara]]

* main: mux, cfg, srv
- Code creates a `mux`, short for HTTP request multiplexer
- `mux` has a function that creates an HTTP server with headers and content (Hello World!)
- `cfg` brings in all the TLS bits seen in a solid web server config
- `srv` puts the pieces together and defines what port to listen on
.image img/GOPHER_SHARE.png _ 450
.caption Gopher Share by [[https://github.com/ashleymcnamara/gophers][Ashley McNamara]]

* Fail Spectacularly
- I ❤️ DevOps. I embrace failure.
- `log.Fatal(srv.ListenAndServeTLS("/etc/ssl-tester/tls.crt",` `"/etc/ssl-tester/tls.key"))`
- Defines path of certificate files to use
- Also logs a fatal error if certificate is not valid
- Fails Fast
.image img/nuclear-weapons-test-explosion.jpg 250 _
: I love DevOps and I embrace failure
: log allows us to fail quickly if the certificates aren't in accordance with RFC
: This is the beauty of crypto/tls
: Stuff in the standard library JUST WORKS

* It's Open Source!
.image img/ssl-tester.png 525 _
.caption [[https://github.com/chris-short/ssl-tester][https://github.com/chris-short/ssl-tester]]
: The code is opensourced
: Check it out on github.com/chris-short/ssl-tester
: Throw a star my way if you feel like it

* It Works!
.image img/ssl-tester-output.png 800 _
: Yes it Works
: Yes you can access it now

* No. It Really Works!
.image img/ssltest-ssl-tester-chrisshort-net.png 600 _
: You can even scan it with external tools!

* Conclusion
- The Go code does exactly what I need it to do and nothing more
- About 40 lines of code!!! I ❤️ Go!
- Binary is a self contained web server
- Less than 6MB!!! I ❤️ Go!
- Can be safely deployed to any public server and have tests run against it for extra vetting
.image img/GOPHER_MIC_DROP.png 225 _
.caption Gopher Mic Drop by [[https://github.com/ashleymcnamara/gophers][Ashley McNamara]] 
